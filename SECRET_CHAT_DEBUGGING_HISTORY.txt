==========================================
TELEGRAM SECRET CHAT VIDEO DELIVERY
COMPREHENSIVE DEBUG HISTORY
==========================================

üéØ PRIMARY GOAL:
Enable Telegram bot to deliver media (photos and videos) via TRUE Telegram End-to-End Encrypted Secret Chats using a userbot.

‚ö†Ô∏è CRITICAL RULES:
1. **ALWAYS USE CURSOR YOLO MODE**
2. User EXPLICITLY REJECTED regular private messages - MUST BE TRUE SECRET CHATS ONLY
3. Do NOT suggest switching to less secure methods
4. Photos work ‚úÖ - Videos are the problem ‚ùå

==========================================
TECHNICAL BACKGROUND
==========================================

SECRET CHAT ARCHITECTURE:
- Secret chats use MTProto 2.0 end-to-end encryption (AES-256-IGE)
- Keys are generated via Diffie-Hellman key exchange
- Shared secret key is stored only on participants' devices
- Files must be encrypted before upload, then sent via messages.sendEncryptedFile
- Decryption keys are sent separately in the encrypted message payload

KEY LIBRARIES:
- `telethon`: Python MTProto client
- `telethon-secret-chat`: Third-party library for secret chat support
- `pycryptodome`: For AES-256-IGE encryption
- `secret_chat_crypto.py`: Our custom encryption implementation

KEY FILES:
- `userbot_pool.py`: Multi-userbot manager, handles secret chat delivery
- `userbot_telethon_secret.py`: Telethon client wrapper (deprecated)
- `secret_chat_crypto.py`: Manual AES-256-IGE implementation
- `telethon_secret_patch.py`: Attempted monkey patches (disabled)
- `manual_secret_file.py`: Manual MTProto 2.0 implementation (incomplete)
- `userbot_admin.py`: Admin interface for adding userbots
- `payment.py`: Triggers delivery after purchase

==========================================
WHAT WORKS ‚úÖ
==========================================

1. **Userbot Authentication**: Multi-userbot system with Telethon
2. **Secret Chat Creation**: `start_secret_chat()` and `get_secret_chat()` work
3. **Text Messages**: `send_secret_message()` delivers successfully
4. **Photo Delivery**: Photos arrive in secret chat correctly
5. **Media Binary Storage**: PostgreSQL stores media as BYTEA
6. **Round-Robin Load Balancing**: Multiple userbots distribute load

==========================================
THE CORE PROBLEM ‚ùå
==========================================

**SYMPTOM**: Videos are corrupted in secret chats (black screen, won't play)

**ROOT CAUSE**: The `telethon-secret-chat` library has a BROKEN implementation of AES-IGE encryption for video files.

**EVIDENCE**:
- Photos work (same encryption, smaller files)
- Videos arrive but are unplayable
- Library error: `AttributeError: 'NoneType' object has no attribute 'auth_key'`
- The library uses `tgcrypto` (compiled C extension) which cannot be monkey-patched

==========================================
ALL ATTEMPTED SOLUTIONS (CHRONOLOGICAL)
==========================================

ATTEMPT #1: Use library as-is
- Result: Videos corrupted
- Issue: Library's encryption is broken

ATTEMPT #2: Upload to Saved Messages, extract attributes
- Result: Got video dimensions/duration, but still corrupted
- Issue: Library still does encryption

ATTEMPT #3: Monkey-patch `send_secret_video` at Python level
- Result: Failed - method still called library's broken encryption
- Issue: Python-level patches don't affect the actual encryption

ATTEMPT #4: Monkey-patch `tgcrypto.ige256_encrypt`
- Result: Failed - tgcrypto is compiled C code, cannot patch
- Issue: Compiled extensions are immutable at runtime

ATTEMPT #5: Custom AES-IGE encryption in `secret_chat_crypto.py`
- Result: Created working encryption, but couldn't inject it
- Issue: No way to pass custom-encrypted data to library

ATTEMPT #6: Manual encryption + send via `client.send_file()`
- Result: Error: `Could not find the input entity for PeerUser(679004502)`
- Issue: Wrong entity - tried to send to secret chat object directly

ATTEMPT #7: Send encrypted file + decryption keys separately
- Result: Encryption worked, but delivery failed (wrong peer)
- Issue: `send_file()` expects user entity, not secret chat object

ATTEMPT #8: Use `send_secret_document()` for all media
- Result: Missing required arguments error
- Issue: Method requires: thumb, thumb_w, thumb_h, mime_type, size

ATTEMPT #9: Provide all required parameters to methods
- Result: Photo worked! Video failed with `AttributeError: 'PhotoStrippedSize' object has no attribute 'w'`
- Issue: Telegram sends multiple thumbnail types, PhotoStrippedSize has no dimensions

ATTEMPT #10: Get secret chat object via `get_secret_chat()`
- Result: Fixed entity lookup issue
- Status: **CURRENTLY DEPLOYED** - waiting for test results

==========================================
CURRENT STATUS (LATEST DEPLOYMENT)
==========================================

**DEPLOYMENT**: v0afd55b
**DATE**: 2025-10-02 01:30 UTC

**CHANGES**:
1. Use `secret_chat_id = start_secret_chat()` (returns integer)
2. Get object via `secret_chat_obj = get_secret_chat(secret_chat_id)`
3. Skip `PhotoStrippedSize` thumbnails, find proper `PhotoSize`

**EXPECTED OUTCOME**:
- Photos: ‚úÖ Already working
- Videos: Should now deliver without errors

**WAITING FOR**: User to test purchase and report results

==========================================
IF CURRENT APPROACH FAILS
==========================================

NEXT STEPS (in order):

1. **Option A: Rate Limit Wait**
   - If error: "A wait of 57894 seconds is required"
   - Solution: Wait or use different userbot
   - Telegram limits secret chat creation frequency

2. **Option B: Manual MTProto 2.0 Implementation**
   - File: `manual_secret_file.py` (already started)
   - Strategy:
     * Manually encrypt with `secret_chat_crypto.py`
     * Upload chunks via `upload.saveFilePart`
     * Send via `messages.sendEncryptedFile`
     * Send decryption key via `send_secret_message`
   - Challenge: Need access to secret chat's shared key
   - Research: How to extract shared key from `telethon-secret-chat`

3. **Option C: Bypass Library Completely**
   - Implement full MTProto 2.0 from scratch
   - Handle Diffie-Hellman key exchange manually
   - Manage secret chat state ourselves
   - Reference: MTProto 2.0 spec (user provided)

4. **Option D: Report Bug to Library Authors**
   - Library: https://github.com/thedemons/telethon-secret-chat
   - Issue: AES-IGE encryption corrupts video files
   - Evidence: Videos work in library's own tests, fail in production
   - Ask: Are we using the library incorrectly?

==========================================
KNOWN ISSUES & WORKAROUNDS
==========================================

**Issue 1**: `AttributeError: 'NoneType' object has no attribute 'auth_key'`
- When: During secret chat handshake
- Impact: Library internal error, doesn't break delivery
- Workaround: Ignore - it's a library bug after successful message send

**Issue 2**: `PhotoStrippedSize` has no dimensions
- When: Extracting video thumbnail attributes
- Solution: ‚úÖ FIXED - iterate through thumbs, skip PhotoStrippedSize

**Issue 3**: `start_secret_chat()` returns int, not object
- When: Creating secret chat
- Solution: ‚úÖ FIXED - use `get_secret_chat(id)` to retrieve object

**Issue 4**: Videos upload but are corrupted
- When: Playing video in secret chat
- Status: ‚ö†Ô∏è INVESTIGATING - likely library's broken encryption
- Next: Verify with latest deployment

**Issue 5**: Rate limiting on secret chat creation
- When: Creating too many secret chats quickly
- Error: "A wait of 57894 seconds is required"
- Solution: Wait or use different userbot account

==========================================
DEBUGGING TIPS
==========================================

1. **Enable Critical Logging**:
   - Look for `logger.critical()` messages
   - These show secret chat object contents
   - Check if `participant_id` matches buyer ID

2. **Check Error Types**:
   - `ValueError: Could not find input entity` = wrong peer
   - `AttributeError: 'PhotoStrippedSize'` = thumbnail issue
   - `SecretChatMethods missing arguments` = incorrect method signature
   - `'NoneType' has no 'auth_key'` = library bug (harmless)

3. **Verify Media Storage**:
   ```sql
   SELECT product_id, media_type, length(media_binary) 
   FROM product_media 
   WHERE product_id = X;
   ```
   Should show non-zero binary lengths

4. **Test Secret Chat Manually**:
   - Start secret chat with userbot from personal account
   - Send test photo/video manually
   - If manual works but bot fails = our code issue
   - If manual also fails = library/userbot issue

==========================================
MTProto 2.0 FILE ENCRYPTION SPEC
==========================================

From official Telegram docs:

1. **Padding**: Add 12-1024 random bytes (multiple of 16)
2. **Key Derivation**:
   ```
   msg_key_large = SHA256(substr(key, 88+x, 32) + plaintext + padding)
   msg_key = substr(msg_key_large, 8, 16)
   sha256_a = SHA256(msg_key + substr(key, x, 36))
   sha256_b = SHA256(substr(key, 40+x, 36) + msg_key)
   aes_key = substr(sha256_a, 0, 8) + substr(sha256_b, 8, 16) + substr(sha256_a, 24, 8)
   aes_iv = substr(sha256_b, 0, 8) + substr(sha256_a, 8, 16) + substr(sha256_b, 24, 8)
   ```
   Where x=0 for originator, x=8 for recipient

3. **Encryption**: AES-256-IGE mode
4. **Fingerprint**: Last 64 bits of SHA1(key)
5. **Upload**: Via `upload.saveFilePart` in 512KB chunks
6. **Send**: Via `messages.sendEncryptedFile` with fingerprint

Our implementation in `secret_chat_crypto.py` follows this spec.

==========================================
DECISION TREE
==========================================

```
Test Current Deployment
    |
    ‚îú‚îÄ Both photo + video work?
    |   ‚îî‚îÄ ‚úÖ SUCCESS! Document and close
    |
    ‚îú‚îÄ Only photo works?
    |   ‚îú‚îÄ Video delivery fails (error)?
    |   |   ‚îî‚îÄ Check error type
    |   |       ‚îú‚îÄ Rate limit ‚Üí Wait or use different userbot
    |   |       ‚îú‚îÄ Wrong peer ‚Üí Debug entity lookup
    |   |       ‚îî‚îÄ Other ‚Üí Analyze logs
    |   |
    |   ‚îî‚îÄ Video delivers but corrupted?
    |       ‚îî‚îÄ Implement manual MTProto 2.0
    |           ‚îú‚îÄ Extract shared key from library
    |           ‚îú‚îÄ Complete manual_secret_file.py
    |           ‚îî‚îÄ Test manual encryption
    |
    ‚îî‚îÄ Neither works?
        ‚îî‚îÄ Revert to last known good state
            ‚îî‚îÄ Re-analyze from scratch
```

==========================================
FILES TO REVIEW
==========================================

When debugging, always check these files:

1. **userbot_pool.py** (lines 150-310)
   - `deliver_via_secret_chat()` method
   - Secret chat creation and media sending

2. **secret_chat_crypto.py** (lines 134-215)
   - `encrypt_file_for_secret_chat()` - our AES-IGE
   - `decrypt_file_from_secret_chat()` - for testing

3. **payment.py** (lines in _finalize_purchase)
   - Where userbot delivery is triggered
   - Media binary fetching from PostgreSQL

4. **userbot_admin.py**
   - Adding new userbots
   - Telethon authentication flow

5. **main.py** (post_init)
   - Userbot pool initialization
   - Patch application (currently disabled)

==========================================
IMPORTANT NOTES
==========================================

1. **Do NOT suggest regular private messages** - user explicitly rejected
2. **Photos already work** - don't break them while fixing videos
3. **Library is fundamentally broken** - may need full MTProto 2.0 rewrite
4. **Rate limits exist** - can't create too many secret chats quickly
5. **PostgreSQL stores media as BYTEA** - may need memoryview conversion
6. **Multi-userbot system works** - round-robin load balancing functional
7. **Text messages work** - encryption handshake is successful

==========================================
LAST UPDATED: 2025-10-02 01:32 UTC
==========================================

